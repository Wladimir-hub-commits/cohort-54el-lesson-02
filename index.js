// JavaScript - может отправлять сетевые запросы на сервер и подгружать новую информацию по мере
// возможности.
// Например, мы можем использовать сетевой запрос чтобы:
// - Отправить заказ, на какомто веб сайте магазина (отправлять запрос на сервер через код)
// - Загрузить информацию о пользователе, (регистрироваться на каких-то сайтах либо приложениях,
//  Телеграм,Вайбер и т.д и отправлять туда информацию о себе (Фото или инфо-ю о себе))
// - Запроситьпоследние обновления с сервера, (соответсвенно клиент постоянно общается с сервером)
// - ...И Т.П.
// В клиент - серверной архитектуре используются три компонента: (Три кита)

// Клиент - программа, которую мы используем в интернете (например: сайт H&M или Facebook).
//  Чаще всего это браузер, но может быть и другая отдельная программа ( например : приложение на
// мобильном устройстве Instagram или Telegram).
// (("Клиент" Frontend часть HTML,CSS,JavaScript)
//  PC
//  Browser (Google Chrome)
//  Facebook (вводите данные чтобы зарегистрироваться))

// Сервер - компьютер, на котором хранится сайт или приложение. Когда мы заходим на сайт магазина,
// мы обращаемся к серверу, на котором находится сайт.(обращение к bacend части чтобы
//  обрабатывать наши запросы)
// (Server Backend код OS - Linux, MscOs, windows Развернуто Backend приложение Java)

// База данных - это программа в котороой хранятся все  приложения .
// Какой - то Server Data Base - Используется какя - то база данных, которая сохраняет все
// полученные данные. Написанная на своем SQL языке например: Mongo DataBase

// Связь общение между клиентом и Сервером
// HTTP - это протокол передачи информации в Интернете, который расшифровывается как
// <<протокол передачи гипертекста>> (HyperTextTransferProtocol).

// Расширение HTTPs - это расширение для протокола HTTP, котрое делает его безопасным.
// Дело в том,что данные передаются в открытом виде. HTTPs решает эту проблему, добовляя в изначальный
//  протокол возможность шифрования данн.

// Json: JavaScriptObjecktNotation - язык общения между системами например: между java и javaScript

const JOKE_CARD = document.querySelector(".joke-card");// получаем доступ к карточке
const JOKES = document.querySelector(".jokes");

const RANDON_JOKE_URL = "https://official-joke-api.appspot.com/random_joke";

JOKE_CARD.addEventListener("submit", async (event) => {
  event.preventDefault();

  // Обработка промисов с помощью async/await
  // Метод fetch возвращает Promise
  // когда мы используем await мы получаем обьект Response - дает общую информацию об ответе,
  // такую как: url, ok, status. А также предоставляет
  // вам методы, для получения данных из body
  // Этот метод называется json()
  // По умолчанию fetch использует метод GET, соответственно его явно прописывать не нужно,
  // Нужно только если вам нужны остальные методы

  //   Тут мы будем отправлять запрос на сервер
  const response = await fetch(RANDON_JOKE_URL, { method: "GET" });
  // fech -это метод запроса на сервер он принимает строку запроса которую мы будем отправлять на сервер 

  // Метод json() возвращает Promise и преобразует JSON в JS обьект, чтобы достать дынные из тела ответа используем await
  // В итоге в result в нашем случае у нас будет лежать ответ от сервера в виде JS обьекта
  const result = await response.json(); // меотод джейсон возвращает promis и преобразует json в JavaScript объект
  

  if (response.ok === true) {
    // тут  пишем логику по успешному ответу, т.е когда промис имеет статус fulfilled
    const joke = `${result.setup} ${result.punchline}`;

    JOKES.textContent = joke;
  } else {
    // тут пишем логику по обработку ошибок, т.е когда промис имеет статус rejected
    alert("Sorry, we have some Network Error. Please try again!");
  }

  // Обрабртка промисов с помощью then и catch
  //   response
  //     .then((data) => {
  //       console.log(data);
  //     })
  //     .catch((error) => {
  //       console.log(error);
  //     });
});
